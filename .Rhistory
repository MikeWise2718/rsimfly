f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-50, 50, length= 30)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(-10,-10,10,10,-10),
y=c(-10, 10,10,-10,-10),
z=c(5,5,5,5,5))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*(w1^2 + w2^2)*x^2 -2*w2 + 1}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(-10,-10,10,10,-10),
y=c(-10, 10,10,-10,-10),
z=c(5,5,5,5,5))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
rgl.snapshot("001.png")
f(0,2)
f(0,1)
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*(w1^2 + w2^2)*x^2 -2*w2*x + 1}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(-10,-10,10,10,-10),
y=c(-10, 10,10,-10,-10),
z=c(5,5,5,5,5))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(-10,-10,10,10,-10),
y=c(-10, 10,10,-10,-10),
z=c(5,5,5,5,5))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
rgl.snapshot("001.png")
?rgl
?polygon3d
require(rgl)
# A trefoil knot
open3d()
theta <- seq(0, 2*pi, len = 25)
knot <- cylinder3d(
center = cbind(
sin(theta) + 2*sin(2*theta),
2*sin(3*theta),
cos(theta) - 2*cos(2*theta)),
e1 = cbind(
cos(theta) + 4*cos(2*theta),
6*cos(3*theta),
sin(theta) + 4*sin(2*theta)),
radius = 0.8,
closed = TRUE)
shade3d(addNormals(subdivision3d(knot, depth = 2)), col = "green")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(-10,-10,10,10,-10),
y=c(-10, 10,10,-10,-10),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.1,0.1,-0.1,-0.1),
y=c(2.1,2.1,1.9,1.9),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.1, 0.1,-0.1,-0.1,0.1),
y=c(1.9,2.1, 2.1, 1.9, 1.9),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(5,5,5,5,5))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-5, 5, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
#f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-50, 50, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
library(rgl)
sig <- function(x) { (1+exp(-x))^-1 }
f1 <- function(w1, w2, x=0.5) { 0.5*((w1^2 + w2^2)*x^2 -2*w2*x + 1)}
f2 <- function(w1, w2, x=0.5) { -w2*x + log(exp(w1*x) + exp(w2*x))}
f3 <- function(w1, w2, x=0.5) { 0.5*(sig(w1*x)^2 + 1 - 2*sig(w2*x) + sig(w2*x)^2)}
f4 <- function(w1, w2, x=0.5) { -log(sig(w1*x)) + log(1-sig(w2*x)) }
f <- f1; mtit <- "Linear Nodes with Squared Error";     colr <- "purple" ; fname <- "f4-ce-n-log.png"
#f <- f2; mtit <- "Softmax with Cross Entroy";           colr <- "pink"    ; fname <- "f4-ce-n-log.png"
#f <- f3; mtit <- "Logistic Nodes with Squared Error";   colr <- "lightgreen"  ; fname <- "f4-ce-n-log.png"
#f <- f4; mtit <- "Cross-Entropy with n logistic units"; colr <- "lightblue"   ; fname <- "f4-ce-n-log.png"
#f <- function(x, y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
x <- seq(-50, 50, length= 31)
y <- x
z <- outer(x, y, f)
z[is.na(z)] <- 1
#persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
#        xlab = "X", ylab = "Y", zlab = mtit)
persp3d(x, y, z, col = colr,  shade = 0.75, ticktype = "detailed",
xlab = "W_1", ylab = "W_2", zlab = mtit )
# Here we add a transparent purple square to mark the top
# x and y mark the corners of the purple square, z is its height
sqdf <- data.frame(x=c(0.3, 0.3,-0.3,-0.3,0.3),
y=c(1.7,2.3, 2.3, 1.7, 1.7),
z=c(1,1,1,1,1))
lndf <- data.frame(x=c(0,0),
y=c(2,2),
z=c(0,10))
# now draw the purple square,
#    note:
#    -  the "add=T" parameter that appends it to the previous 3d-plot
#    -  the coord paramter tells it what two planes to use when
#        tesselating the polygon into triangles
#        (a necessary step and expensive to calculate)
#polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="purple",add=T)
polygon3d(sqdf$x,sqdf$y,sqdf$z,coord=c(1,2),alpha=0.5,color="red",add=T)
rgl.snapshot("001.png")
97/261
4257.79 + 2857.58 + 1014.34
setwd("D:/local/rsimfly")
shiny::runApp()
setwd("D:/local/mw3dlib")
install.packages("mw3dlib",type = "source",repo = NULL,verbose = T)
setwd("D:/local/rsimfly")
runApp()
runApp()
