sliderInput(inputId = "maxmimumElevation",
label = "Feet (ASL) - Maximum",
min = 215,
max = 290,
value = 290,
step = 1)
),
mainPanel(plotOutput("theGraph"))
)
)
s <- shinyServer(function(input,output) {
passData <- reactive({
campbell_out <- campbell_out[campbell_out$day %in%
seq.Date(input$dateRange[1],
input$dateRange[2],by = "days"),]
campbell_out <- campbell_out[campbell_out$sonde.elev %in%
seq(as.numeric(input$minimumElevation),
as.numeric(input$maximumElevation),by = 0.000001),]
campbell_out
})
output$theGraph <- renderPlot({
graphData <- ddply(passData(),.(day),numcolwise(mean))
theGraph <- plot(temperature_c ~ day,data = graphData,ylab = "Temperature (c)",xlab = "Time")
print(theGraph)
})
})
shinyApp(ui = u,server = s)
ddply
dplyr:ddply
dplyr::ddply
library(plyr)
library(shiny)
library(plyr)
day <- seq.Date(as.Date("2016-01-01"),as.Date("2016-12-31"),by = 'day')
temperature_c <- runif(366,0,35)
sonde.elev <- 215
df.1 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 220
df.2 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 225
df.3 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 230
df.4 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 235
df.5 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 240
df.6 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 245
df.7 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 250
df.8 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 255
df.9 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 260
df.10 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 265
df.11 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 270
df.12 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 275
df.13 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 280
df.14 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 285
df.15 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 290
df.16 <- data.frame(day,sonde.elev,temperature_c)
campbell_out <- rbind(df.1,df.2,df.3,df.4,df.5,df.6,df.7,df.8,df.9,df.10,df.11,df.12,df.13,df.14,df.15,df.16)
campbell_out <- campbell_out[order(campbell_out$day),]
u <- shinyUI(pageWithSidebar(
headerPanel("Stack Overflow Lough"),
sidebarPanel(
dateRangeInput(inputId = "dateRange",
label = "Date Range",
start = "2016-01-01",
max = Sys.Date()
),
sliderInput(inputId = "minimumElevation",
label = "Feet (ASL) - Minimum",
min = 215,
max = 290,
value = 215,
step = 1),
sliderInput(inputId = "maxmimumElevation",
label = "Feet (ASL) - Maximum",
min = 215,
max = 290,
value = 290,
step = 1)
),
mainPanel(plotOutput("theGraph"))
)
)
s <- shinyServer(function(input,output) {
passData <- reactive({
campbell_out <- campbell_out[campbell_out$day %in%
seq.Date(input$dateRange[1],
input$dateRange[2],by = "days"),]
campbell_out <- campbell_out[campbell_out$sonde.elev %in%
seq(as.numeric(input$minimumElevation),
as.numeric(input$maximumElevation),by = 0.000001),]
campbell_out
})
output$theGraph <- renderPlot({
graphData <- ddply(passData(),.(day),numcolwise(mean))
theGraph <- plot(temperature_c ~ day,data = graphData,ylab = "Temperature (c)",xlab = "Time")
print(theGraph)
})
})
shinyApp(ui = u,server = s)
library(shiny)
library(plyr)
day <- seq.Date(as.Date("2016-01-01"),as.Date("2016-12-31"),by = 'day')
temperature_c <- runif(366,0,35)
sonde.elev <- 215
df.1 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 220
df.2 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 225
df.3 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 230
df.4 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 235
df.5 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 240
df.6 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 245
df.7 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 250
df.8 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 255
df.9 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 260
df.10 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 265
df.11 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 270
df.12 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 275
df.13 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 280
df.14 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 285
df.15 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 290
df.16 <- data.frame(day,sonde.elev,temperature_c)
campbell_out <- rbind(df.1,df.2,df.3,df.4,df.5,df.6,df.7,df.8,df.9,df.10,df.11,df.12,df.13,df.14,df.15,df.16)
campbell_out <- campbell_out[order(campbell_out$day),]
u <- shinyUI(pageWithSidebar(
headerPanel("Stack Overflow Lough"),
sidebarPanel(
dateRangeInput(inputId = "dateRange",
label = "Date Range",
start = "2016-01-01",
max = Sys.Date()
),
sliderInput(inputId = "minimumElevation",
label = "Feet (ASL) - Minimum",
min = 215,
max = 290,
value = 215,
step = 1),
sliderInput(inputId = "maxmimumElevation",
label = "Feet (ASL) - Maximum",
min = 215,
max = 290,
value = 290,
step = 1)
),
mainPanel(plotOutput("theGraph"))
)
)
s <- shinyServer(function(input,output) {
passData <- reactive({
req(input$dateRange)
campbell_out <- campbell_out[campbell_out$day %in%
seq.Date(input$dateRange[1],
input$dateRange[2],by = "days"),]
campbell_out <- campbell_out[campbell_out$sonde.elev %in%
seq(as.numeric(input$minimumElevation),
as.numeric(input$maximumElevation),by = 0.000001),]
campbell_out
})
output$theGraph <- renderPlot({
graphData <- ddply(passData(),.(day),numcolwise(mean))
theGraph <- plot(temperature_c ~ day,data = graphData,ylab = "Temperature (c)",xlab = "Time")
print(theGraph)
})
})
shinyApp(ui = u,server = s)
library(shiny)
library(plyr)
day <- seq.Date(as.Date("2016-01-01"),as.Date("2016-12-31"),by = 'day')
temperature_c <- runif(366,0,35)
sonde.elev <- 215
df.1 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 220
df.2 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 225
df.3 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 230
df.4 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 235
df.5 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 240
df.6 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 245
df.7 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 250
df.8 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 255
df.9 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 260
df.10 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 265
df.11 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 270
df.12 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 275
df.13 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 280
df.14 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 285
df.15 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 290
df.16 <- data.frame(day,sonde.elev,temperature_c)
campbell_out <- rbind(df.1,df.2,df.3,df.4,df.5,df.6,df.7,df.8,df.9,df.10,df.11,df.12,df.13,df.14,df.15,df.16)
campbell_out <- campbell_out[order(campbell_out$day),]
u <- shinyUI(pageWithSidebar(
headerPanel("Stack Overflow Lough"),
sidebarPanel(
dateRangeInput(inputId = "dateRange",
label = "Date Range",
start = "2016-01-01",
max = Sys.Date()
),
sliderInput(inputId = "minimumElevation",
label = "Feet (ASL) - Minimum",
min = 215,
max = 290,
value = 215,
step = 1),
sliderInput(inputId = "maxmimumElevation",
label = "Feet (ASL) - Maximum",
min = 215,
max = 290,
value = 290,
step = 1)
),
mainPanel(plotOutput("theGraph"))
)
)
s <- shinyServer(function(input,output) {
passData <- reactive({
req(input$dateRange)
campbell_out <- campbell_out[campbell_out$day %in%
seq.Date(input$dateRange[1],
input$dateRange[2],by = "days"),]
campbell_out <- campbell_out[campbell_out$sonde.elev %in%
seq(as.numeric(input$minimumElevation),
as.numeric(input$maximumElevation),by = 0.000001),]
campbell_out
})
output$theGraph <- renderPlot({
graphData <- ddply(passData(),.(day),numcolwise(mean))
theGraph <- plot(temperature_c ~ day,data = graphData,ylab = "Temperature (c)",xlab = "Time")
print(theGraph)
})
})
shinyApp(ui = u,server = s)
library(shiny)
library(plyr)
day <- seq.Date(as.Date("2016-01-01"),as.Date("2016-12-31"),by = 'day')
temperature_c <- runif(366,0,35)
sonde.elev <- 215
df.1 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 220
df.2 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 225
df.3 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 230
df.4 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 235
df.5 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 240
df.6 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 245
df.7 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 250
df.8 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 255
df.9 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 260
df.10 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 265
df.11 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 270
df.12 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 275
df.13 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 280
df.14 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 285
df.15 <- data.frame(day,sonde.elev,temperature_c)
sonde.elev <- 290
df.16 <- data.frame(day,sonde.elev,temperature_c)
campbell_out <- rbind(df.1,df.2,df.3,df.4,df.5,df.6,df.7,df.8,df.9,df.10,df.11,df.12,df.13,df.14,df.15,df.16)
campbell_out <- campbell_out[order(campbell_out$day),]
u <- shinyUI(pageWithSidebar(
headerPanel("Stack Overflow Lough"),
sidebarPanel(
dateRangeInput(inputId = "dateRange",
label = "Date Range",
start = "2016-01-01",
max = Sys.Date()
),
sliderInput(inputId = "minimumElevation",
label = "Feet (ASL) - Minimum",
min = 215,
max = 290,
value = 215,
step = 1),
sliderInput(inputId = "maxmimumElevation",
label = "Feet (ASL) - Maximum",
min = 215,
max = 290,
value = 290,
step = 1)
),
mainPanel(plotOutput("theGraph"))
)
)
s <- shinyServer(function(input,output) {
passData <- reactive({
req(input$dateRange)
campbell_out <- campbell_out[campbell_out$day %in%
seq.Date(input$dateRange[1],
input$dateRange[2],by = "days"),]
campbell_out <- campbell_out[campbell_out$sonde.elev %in%
seq(as.numeric(input$minimumElevation),
as.numeric(input$maximumElevation),by = 0.001),]
campbell_out
})
output$theGraph <- renderPlot({
graphData <- ddply(passData(),.(day),numcolwise(mean))
theGraph <- plot(temperature_c ~ day,data = graphData,ylab = "Temperature (c)",xlab = "Time")
print(theGraph)
})
})
shinyApp(ui = u,server = s)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
print(source('D:/StackOverflow/R-shiny/SimpleShingInput/jnk.R')$value)
?aes_string
interactive()
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
# Add a CSS class for red text colour
inlineCSS(list(.red = "background: red")),
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggleClass("element", "red")
})
}
)
library(shiny)
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load(shinyjs)
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
# Add a CSS class for red text colour
inlineCSS(list(.red = "background: red")),
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggleClass("element", "red")
})
}
)
library(shiny)
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("shinyjs")
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
# Add a CSS class for red text colour
inlineCSS(list(.red = "background: red")),
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggleClass("element", "red")
})
}
)
library(shiny)
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load("shinyjs")
shinyApp(
ui = fluidPage(
useShinyjs(), # Set up shinyjs
# Add a CSS class for red text colour
inlineCSS(list(.red = "background: red")),
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggleClass("element", "red")
})
}
)
a <- matrix(rnorm(16),4,4)
b <- matrix(rnorm(12),4,3)
c <- matrix(rnorm(9),3,3)
db <- matrix(0.00001,4,3)
m <- a %*% b %*% c
mpdb <- a %*% (b+db) %*% c
mpdb - m
(mpdb - m)/0.0001
bones <- matrix(1,4,3)
a %*% bones %*% c
(mpdb - m)/0.00001
devtools::install_github("rforge/rgl", subdir="pkg/rgl")
sessionInfo()
?devtools::install_github
devtools::install_github("rforge/rgl/pkg/rgl")
setwd("d:/local/rgl/rgl/")
list.files()
setwd("d:/local/rgl/rgl/pkg/")
install.packages("rgl")
list.files()
?install.packages
install.packages("rgl",type="source")
library(rgl)
sessionInfo()
install.packages("rgl",type="source",repos=NULL)
sessionInfo()
library(rgl)
sessionInfo()
setwd("D:/local/rsimfly")
shiny::runApp()
setwd("d:/local/rgl/rgl/pkg/")
install.packages("rglwidget",type="source",repos=NULL)
setwd("D:/local/rsimfly")
runApp()
devtools::install_github("rforge/rgl",subdir="pkg/rgl")
devtools::install_github("rforge/rgl",subdir="/tree/master/pkg/rgl")
devtools::install_url("https:/github.com/rforge/rgl/pkg/rgl")
devtools::install_url("https://github.com/rforge/rgl/tree/master/pkg/rgl")
?install_url
devtools::install_url("https://github.com/rforge/rgl/",subdir="tree/master/pkg/rgl")
